parameters:
  - name: aws_dev
    default: aws --profile=apim-dev
  - name: is_ptl
    default: true

steps:
  - ${{ if parameters.is_ptl }}:
    - template: "azure/components/aws-assume-role.yml@common"
      parameters:
          role: "auto-ops"
          profile: "apm_ptl"

    - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
      parameters:
          secret_file_ids:
              - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
          secret_ids:
              - ptl/app-credentials/gp-connect-user-permissions-testing-app/non-prod/INTROSPECTION_CLIENT_ID
              - ptl/app-credentials/gp-connect-user-permissions-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET
              - ptl/app-credentials/gp-connect-user-permissions-testing-app/non-prod/INTROSPECTION_CLIENT_ID_INT
              - ptl/app-credentials/gp-connect-user-permissions-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET_INT

  - bash: |
      make install-python
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup pytests
    condition: always()

  - bash: |
      set -e
      export RELEASE_RELEASEID=$(Build.BuildId)
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
      export STATUS_ENDPOINT_API_KEY="$(status-endpoint-api-key)"
      export JWT_PRIVATE_KEY_ABSOLUTE_PATH="$(Pipeline.Workspace)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export client_id="$(INTROSPECTION_CLIENT_ID)"
      export client_secret="$(INTROSPECTION_CLIENT_SECRET)"
      export APIGEE_APP_ID=6e8f18e7-612b-465c-9dbc-d089203bc91e 
      
      if [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]
      then
       poetry run pytest -v -m "not nhsd_apim_authorization" --api-name=gp-connect-user-permissions --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml

      elif [[ $APIGEE_ENVIRONMENT == "int" ]]
      then
       make run-int
      
      else
       poetry run pytest -v --api-name=gp-connect-user-permissions --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml
      fi
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests"
    displayName: Run full test suite
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml'
      failTaskOnFailedTests: true